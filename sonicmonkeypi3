#!/usr/bin/perl
# -----------------------------------------------------
# Soundmonkey for tiny Linuxes, preview version
# @diemastermonkey / @garyd
# Required: 
#   1. A FreeSound API key - get one here:
#      http://freesound.org/help/developers/ 
#   2. curl, play (sox) - or edit $Get and $Player
#      /bin/sh (forked)
#
# Optional:
#   Add keywords in keywords.txt
#   Edit output format in format.txt
#   Add banned sound authors to banlist.txt!
#
# To do / missing features
#   Almost no error checking 
#   Cache expirey - it grows forever
#   Connect it to outside world
# -----------------------------------------------------
# Other fields of interest:
# bitdepth, samplerate 
# (URIs) analysis, analysis_stats, similar_sounds, images
# -----------------------------------------------------

# Default search keywords 
my $DefaultKeywords = "sitar low-frequency circuit-bent thunder environmental";
# my @Keywords = split (/\s+/, $DefaultKeywords);

# Settings
my $MinLen=20; my $MaxLen=120;   # Len limits of samples
my $PlayOverlap = 0.85;          # pct overlap in sample play
my $ConfigRefresh = 3;          # How often (cycles) to re-read cfgs

my $Get="/usr/bin/curl --silent -o -";
my $Token=`cat token.txt`; chomp($Token); # No err check
my $Format=`cat format.txt`;              # No err check
my $Banlist = `cat banlist.txt`; chomp ($Banlist);
my $RunCount = -1;			  # -1 forever
my $CycleCount = 0;                       # For periodic events

my $Player="/usr/bin/play -V0 -q "
  ."\"cache/_SOUNDID_.ogg\" "             # Filename
  # ." --buffer 256 "    # Increase process buffer, default 8192
  ." rate -l"            # -m or -h or -l quality
  ." _SPEED_ "           # Speed effect if present
  # ." _OOPS_ "            # out-of-phase aka Karaoke, present or not 
  # ." contrast 0.85 "	 # Not useful? Look for norm?
  ." _REVERSE_ "         # either present or not (INSANE)
  ." _ECHOPARMS_ "
  ." repeat _REPEATS_ "      # Range 0 (one play) to N
  ." _BENDPARMS_ "          # Lo rez/parms at runtime
  ." fade _FIN_ _RIDE_ _FOUT_ "            # Fx...
  ." ";

my $Host="http://www.freesound.org/apiv2";
my $Search="search/text/?query=_KEYWORD_&token=$Token"
  ."&page_size=150"				     # Hardwired results size
  ."&filter=duration:\\[$MinLen\%20TO\%20$MaxLen\\]";# Ware escaping

my $Download="$Get \"_AUDIOURL_\" > cache/_SOUNDID_.ogg";
# my $Info="sounds/_SOUNDID_/?token=$Token";
# NEW version includes some analysis for later similarity matches
my $Info="sounds/_SOUNDID_/?descriptors=lowlevel.pitch.mean,rhythm.bpm&token=$Token";
my $Touch="/usr/bin/touch ";	# filename wll be appended
my %Listings;                   # Search listing cache

# When populated, Next (a sound ID) played instead of random selection
my $Next = "";

# Get single-instance field from sound detail
# ------------------------------------------------------
sub fnField {
  my $field = shift (@_);
  my $data = shift (@_); 
  $match = "n/a";
  $match = $1 if (
    # $data =~ /\"$field\"\:\s*\"*([^\\\"]+)\"*\,/
    $data =~ /\"$field\"\:\s*\"*([^\\\"]+)\"*(\,|\n|\})/
  );
  return ($match);
}

# Cache a set of keyword query results to disk
# ------------------------------------------------------
sub fnCacheWrite {
  my $word = shift (@_);
  my $data = shift (@_);
  open (OUT, ">cache/$word.cache")
    or die ("\nFatal: Can't write cache/$word.cache .\n");
  print (OUT $data);
  close (OUT);
}

# Read a cache
# ------------------------------------------------------
sub fnCacheRead {
  my $word = shift (@_);
  open (IN, "<cache/$word.cache")
    or die ("\nFatal: Can't read cache/$word.cache.\n");
  my $data = <IN>;
  close (IN);
  $ignored = `$Touch cache/$word.cache`; # For crude cache expiry
  return ($data);
}

# Sound player 
# ------------------------------------------------------
sub fnPlay {
  my $cmd = shift (@_);
  open (PLAY, "|/bin/sh|")
    or die ("\nFatal: Can't open player with $Player\n");
  print (PLAY "$cmd \&");
  close (PLAY);
}

# Grok keywords 
# ------------------------------------------------------
sub fnKeywords {
  # Start with default keywords
  @Keywords = split (/\s+/, $DefaultKeywords);

  # Append contents of 'keywords.txt' if exists
  if (-r "keywords.txt") { 
    $raw = `cat keywords.txt`; 	# Brutal
    push (@Keywords, split (/\n+|\s+|\,/, $raw));
  }
}

# Mainline
# ------------------------------------------------------


# First lone number if any in argv assumed to be runcount
if (grep (/\d/, @ARGV)) {
  $RunCount = shift (@ARGV);
}

# Get (or update) keywords
fnKeywords();

# Append keywords from cmd line if any
if (grep(s/\=//, @ARGV)) { 
  @Keywords = @ARGV;       # Override all with =keyword
} else {                   # Else append all (or none)
  push (@Keywords, shift (@ARGV)) if (@ARGV);
}

# Make cache dir if no exist
unless (-d "cache") { `mkdir cache` };

# Loop either forever, or till RunCount exhausted
while ($RunCount < 0 or $RunCount > 0) {
  $CycleCount++;
  $RunCount--;

  # If time to refresh settings
  if ($CycleCount % $ConfigRefresh == 0) {
    $Banlist = `cat banlist.txt`; chomp ($Banlist); # Refresh brutally
    fnKeywords();         # Currently discards cmd-line additions
    print ("...config refreshed."); # DEBUG
  }

  # Choose a keyword search
  # KLUDGE: Unless a 'next' is set
  if ($Next eq "") {
    $KeywordIndex = int(rand(@Keywords));
    $Keyword = @Keywords[$KeywordIndex];
    $Query = "$Host/$Search";
    $Query =~ s/_KEYWORD_/$Keyword/g;

    # Use cached results if found
    if (-r "cache/$Keyword.cache") {
      $WasCached = 1;
      $Listing = fnCacheRead($Keyword); 
    } else {
      $WasCached = 0;
      $Listing = `$Get \"$Query\"`; 
      # $Listings{$Keyword} = $Listing;     # Memory cache
      fnCacheWrite ($Keyword, $Listing);  # Add to cache
    }

    # Grok search listing
    $Sounds = $1 if ($Listing =~ /\"count\"\:\s*(\d+)\,/);
    @ListingFields = split (/\,/, $Listing);
    @SoundIDs = grep (/\"id\"\:\s*\d+/, @ListingFields); 
    @SoundIDs = grep (s/\D+//g, @SoundIDs);

    # Pick a sound ID
    $Selected = @SoundIDs[int(rand(scalar(@SoundIDs)))]; 
  }

  # KLUDGE DEBUG KLUDGE: Ignore all that if Next specified
  unless ($Next eq "") {
    print ("\nNote: Next specified as $Next ...");
    $Selected = $Next;
    $Next = "";
  }

  # Use cached sound metadata if found
  if (-r "cache/$Selected-data.cache") {
    $SoundMeta = fnCacheRead("$Selected\-data"); 
    $SoundCached = "|";		# Indicate was cached
  } else {
    # Get the sound metadata record
    $Query = "$Host/$Info";
    $Query =~ s/_SOUNDID_/$Selected/g;
    $SoundMeta = `$Get \"$Query\"`; 
    fnCacheWrite ("$Selected\-data", $SoundMeta); # Add to cache 
    $SoundCached = ">";
  }

  # Get fields out of raw results
  # HQ $SoundPreview = fnField ("preview-hq-ogg", $SoundMeta);
  $SoundID = $Selected;		# Convenience
  $SoundPreview = fnField ("preview-lq-ogg", $SoundMeta);
  $SoundAuthor = fnField ("username", $SoundMeta);
  $SoundName = fnField ("name", $SoundMeta);
  $SoundDesc = fnField ("description", $SoundMeta);
  $SoundLength = fnField ("duration", $SoundMeta);
  $SoundRating = fnField ("avg_rating", $SoundMeta);
  $SoundLicense = fnField ("license", $SoundMeta);
  $SoundURL = fnField ("url", $SoundMeta);
  $SoundSimilar = fnField ("similar_sounds", $SoundMeta);
  $SoundAnalysis = fnField ("analysis", $SoundMeta);
  # EXPERIMENTAL new bpm NOTE: Smashed to INT !
  $SoundBPM = int(fnField ("bpm", $SoundMeta));  

  # New: Skip completely if author or ID on banlist
  # WARNING, a silent eternal loop possible here! FIX !
  if ($Banlist =~ /$SoundAuthor/i or $Banlist =~ /$Selected/i) { 
    print ("...skipped $SoundAuthor"); # trails
    next;  # Skip rest of loop
  }

  # Info
  # Rating: $SoundRating");
  # print ("\nAudio  : $SoundPreview");
  print ("\n");   # Breaks trailing display
  printf ($Format, 
    $Selected,	  # id
    $SoundAuthor, # author
    $SoundLength, # len
    $SoundCached, # cache indicator
    $Keyword,     # keyword
    # $SoundName,   # title
    "$SoundName ($SoundBPM bpm)",   # title plus kludged bpm
    $SoundLicense,# license
    $SoundURL,    # URL
    $SoundDesc    # desc
  ); 

  # DEBUG
  # print ("\nDEBUG: \n Similar = $SoundSimilar \n Analysis = $SoundAnalysis \n");

  # Crude audio cache
  if (-r "cache/$Selected.ogg") {
    # To do: expire old caches
  } else {        # BruteCache (tm)
    $Query = $Download;
    $Query =~ s/_AUDIOURL_/$SoundPreview/g;
    $Query =~ s/_SOUNDID_/$Selected/g;
    # print ("\nBruteCaching(tm)...\r");
    $SoundMeta = `$Query`; 
  }

  # Kludge special effects parms
  $FadeIn = $SoundLength * 0.33;
  $FadeOut = $SoundLength * 0.33;
  $FadeIn = 15 if ($FadeIn > 15);
  $FadeOut = 15 if ($FadeOut > 15);
  $FadeRide = 0; # Makes ride all remaining len
  # $Pitch = -1 * int(rand(1000)); # Hardwired pitch-down range

  # Handle echo or none Update: actually is delay
  $EchoParms = " ";
  if (int(rand(2)) == 0) {
    $EchoTime = 0.25 + rand(3.3);
    # $EchoParms = " delay 0 $EchoTime ";   # Only 2nd channel delayed, is faster
    $EchoParms = " delay $EchoTime ";   # Only 2nd channel delayed, is faster
  }

  # Repeats: Shorter samples repeat more, max 45s
  $Repeats = 0;
  $Repeats += int(rand(4)) if ($SoundLength < 61); # If larger, 0 

  # Apply bends to _BENDPARMS_
  $BendParms = "";
  $BendTemp = "";
  $Bends = int(rand(4));
  if ($Bends) {$Bends = 1 if ($SoundLength < 61);} # No multibend short samples
  $sections = $SoundLength / 9;
  for ($i=0; $i < $Bends ; $i++) {
    $BendDelay = $sections * ($i + 1);
    $BendDelay *= 1 + rand(2);	# Could up to double
    # Pitch bend. To do: Base on sample tone
    $BendTime = $sections;      # Boring but safe?
    $BendCents = -1 * int(rand(777));
    $BendCents *= -1 if (int(rand(2))); # maybe invert
    $BendTemp .= "$BendDelay,$BendCents,$BendTime ";
  }
  if ($Bends) {
    $BendParms = "bend -f 10 -o 4 $BendTemp";
  }

  # Rarely, enable reverse play
  $Reverse = "";   # dumb
  if (int(rand(3)) == 0) {
    $Reverse = "reverse";
  }

  # Rarely, speed effect (slow only)
  $Speed = "";   # dumb
  if (int(rand(2)) == 0) {
    $s = rand(0.6) + 0.38;  # Range 0.4 - 1.0
    $Speed = " speed $s ";
  }

  # Play the preview and wait
  # print ("\R$Repeats B$Bends Fi$FadeIn Eg$EchoGain \n"); # Debug
  $Play = $Player; 
  $Play =~ s/_SOUNDID_/$Selected/g;
  $Play =~ s/_FIN_/$FadeIn/g;
  $Play =~ s/_RIDE_/$FadeRide/g;
  $Play =~ s/_FOUT_/$FadeOut/g;
  $Play =~ s/_SPEED_/$Speed/g; 
  $Play =~ s/_OOPS_/$Oops/g; 
  $Play =~ s/_REVERSE_/$Reverse/g;   # Totally insane
  $Play =~ s/_ECHOPARMS_/$EchoParms/g;
  $Play =~ s/_BENDPARMS_/$BendParms/g;
  $Play =~ s/_REPEATS_/$Repeats/g;

  # Play via shell pipe
  print ("\r                     \rPlaying... \n"); # Pre-erases
  fnPlay ($Play);

  # While waiting, possibly choose a related sound to play next
  # IF rating high enough - and lucky
  # MOSTLY duped in main logic, fix that
  if ($SoundRating > 1.5 && int(rand(2)) == 0) {
    # Fetch 'similar' URL
    $turl = "http://www.freesound.org/apiv2/sounds/$SoundID/similar/?token=$Token";
    # $turl = "http://www.freesound.org/apiv2/sounds/$SoundID/similar/?descriptors=lowlevel.pitch.mean\&descriptors_filter=.lowlevel.pitch.mean:[90\%20TO\%20110]&token=$Token";
    # brackets breaking?
    # $turl = "http://www.freesound.org/apiv2/sounds/$SoundID/similar/?descriptors=lowlevel.pitch.mean&descriptors_filter=.lowlevel.pitch.mean&token=$Token";
    # print ("\n DEBUG turl = $turl \n");
    $SimilarRaw = `$Get \"$turl\"`; 

    # TO DO ERROR empty results CHECK
    
    # grok IDs from it
    @ListingFields = split (/\,/, $SimilarRaw);
    # print ("\nDEBUG: Ordinary IDs are \n");
    # print (@SoundIDs);
    @SoundIDs = grep (/\"id\"\:\s*\d+/, @ListingFields); 
    @SoundIDs = grep (s/\D+//g, @SoundIDs);
    # pick one
    $Selected = @SoundIDs[int(rand(scalar(@SoundIDs)))]; 
    $Next = $Selected;
    # print ("\nDEBUG: Similar IDs are \n");
    # print (@SoundIDs);
    # print ("\nDEBUG: SimilarRaw is \n $SimilarRaw");
    print ("\nDEBUG: Set a Next, to $Next");
    # print ("\nDEBUG: turl = $turl");
    # print ("\nSimilar IDs:"); print (@SoundIDs);

    # KLUDGE: Set "keyword" to reflect the "follow"
    $Keyword = "Followed from $SoundID";  # current, not next, id
  } else {
    printf ("\nNote: Sound not rated high enough for similarity");
  }

  # Wait for 1/Xth length of the audio
  # print ("\rResting...\n");
  sleep (int ($SoundLength * $PlayOverlap));
  print ("\rChoosing...");
}

# RunCount used up 
print ("\nEnding (RunCount 0).");
# fin
